ARCHITECTURE
* Decide how consistently it's appropriate to say "registered" in accessors for registered tags.
* Decide whether addFile() should be updated to validate FileProperties for registered tags...
* Decide whether appropriate to include a setTags() function for multiple tags on a file at once
* If a tag is missing from a file, should it automatically be considered UNCOMMITTED?
* What would be the best way to store information about the order of tags in the UI, theoretical
  colors assigned to each tag, etc.? If this were to end up in the tagdef JSON, it would transform
  it from a utilitarian, data-centric structure to something more frontend-oriented, but if we
  were to maintain separate files, then there would be tight links the two that the utility would
  have to maintain. This too doesn't seem like good design.
* getRating() can return a default optional when either the file doesn't declare a rating or when
  the file doesn't exist. Is this ambiguity acceptable?

CODE DESIGN
* Consider ways of separating JSON read/write functions from data-centric TagMap container.
* Where appropriate, consider replacing std::pair with explicit struct.
* Where appropriate, consider replacing bool with explicit enum.
* Allow more granularity in communicating ofstream/ifstream errors in TagMap to/from file ops.
* Reduce duplicated code within OnNew(), OnOpen().
* Get serious about versioning the protocol of the JSON file representing the TagMap.
* Can we Bind() to control events right after we construct them? It would spare our having to
  maintain an enumeration of IDs.
* Make usage of strings and wide strings consistent.
* Find a way around the "ellipse hack." (See doEllipseHack() in main_frame.cpp.)

PROJECT INFRASTRUCTURE
* Update root CMakeLists to build only required configuration of wxWidgets.
* Revisit the confusing matter of how to link libraries for wxWidgets. I don't think that including
  them one-by-one is the intended use, but I struggled for hours in vain to find the "right" way.
* Resolve Catch2 debug issue (PDB warnings upon build).
* Figure out how to configure startup project via CMake such that I can simply F5 from VS to build
  and execute RagTag.exe without needing to modify solution settings.
* For debugging purposes, create backup files when saving. (Maybe this would be in production too?)
* Generate Doxygen documentation pages for the API?

EXECUTION
* Document all classes, functions, fields, etc.
* Use std::map::max_size() in relevant functions that check capacity.
* Define JSON labels ("id", "tag", etc.) as constants rather than use them as magic strings.
* Add appropriate licenses (wxWidgets, Catch, nlohmann JSON).
* Make sure we add functions setting and retrieving TagProperties.
* Add coverage checks.
* Add a fileDeclaresTag() into the TagMap API, which would spare the developer the need to look up
  the file, look up the file's tags, search the file's tags for the tag in question, etc. And after
  doing this, replace the logic within refreshTagToggles() to make use of this new function.
* Confirm that default tag states are handled properly in read/write within Tests.
* This page says not to use 0 and 1 as manually assigned IDs:
  https://docs.wxwidgets.org/latest/overview_windowids.html. Make sure we aren't using these.
* Turn default file view column widths into constants.
* Turn "Play" and "Pause" labels into constants.

FEATURES
* Add ability to drag tags around.
* Add exclusive settings whereby assigning one tag removes another.

BUGS
* Figure out why last tag gets smooshed when redrawing when the list occupies the visible extents
  of the panel.

NOTES
* When resuming debug log efforts, use this code:
```
    // TODO: DEBUG
    const wxString debug_media_dir = wxStandardPaths::Get().GetDocumentsDir() + "/ragtag-debug/";
    wxFFileOutputStream output(debug_media_dir + "debug.txt");
    wxTextOutputStream log(output);
```
